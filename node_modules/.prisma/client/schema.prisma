// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MANAGER
  SALESPERSON
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TransactionType {
  SALE
  PURCHASE
  RETURN
  ADJUSTMENT
  TRANSFER
  DEBIT
  CREDIT
  JOURNAL
  BANK_TRANSFER
  PAYMENT
  RECEIPT
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  CHEQUE
  CREDIT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// ==================== ADMIN MODULE MODELS ====================

model UserRole {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  isSystem    Boolean          @default(false)
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]
  permissions RolePermission[]

  @@map("user_roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  module      String // e.g., 'sales', 'inventory', 'finance'
  action      String // e.g., 'create', 'read', 'update', 'delete'
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  role         UserRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model SystemNotification {
  id          String               @id @default(cuid())
  title       String
  message     String
  type        NotificationType     @default(INFO)
  priority    NotificationPriority @default(NORMAL)
  isActive    Boolean              @default(true)
  expiresAt   DateTime?
  createdById String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdBy   User                 @relation("SystemNotificationCreatedBy", fields: [createdById], references: [id])

  @@map("system_notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Theme {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  primaryColor    String
  secondaryColor  String
  backgroundColor String
  textColor       String
  isDefault       Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("themes")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  username  String?    @unique
  firstName String
  lastName  String
  phone     String?
  roleId    String?
  role      UserRole?  @relation(fields: [roleId], references: [id])
  status    UserStatus @default(ACTIVE)
  password  String
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  sessions            UserSession[]
  systemNotifications SystemNotification[] @relation("SystemNotificationCreatedBy")
  sales               Sale[]
  purchases           Purchase[]
  auditLogs           AuditLog[]
  notifications       Notification[]
  approvalsRequested  Approval[]           @relation("ApprovalRequestedBy")
  approvalsApproved   Approval[]           @relation("ApprovalApprovedBy")
  creditNotesIssued   CreditNote[]         @relation("CreditNoteIssuedBy")
  creditNotesApproved CreditNote[]         @relation("CreditNoteApprovedBy")
  salesTargets        SalesTarget[]
  commissions         Commission[]         @relation("UserCommissions")

  @@map("users")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  sku          String        @unique
  barcode      String?       @unique
  rfidTag      String?       @unique
  price        Decimal       @db.Decimal(10, 2)
  cost         Decimal       @db.Decimal(10, 2)
  minStock     Int           @default(0)
  maxStock     Int?
  currentStock Int           @default(0)
  unit         String        @default("piece")
  status       ProductStatus @default(ACTIVE)
  categoryId   String
  supplierId   String?
  taxRate      Decimal       @default(0) @db.Decimal(5, 2)
  image        String?

  // Relations
  category       Category        @relation(fields: [categoryId], references: [id])
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  saleItems      SaleItem[]
  purchaseItems  PurchaseItem[]
  stockMovements StockMovement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Supplier {
  id            String  @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  contactPerson String?
  taxId         String?

  // Relations
  products  Product[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suppliers")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  taxId       String?
  creditLimit Decimal? @db.Decimal(10, 2)

  // Relations
  sales Sale[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Sale {
  id                String             @id @default(cuid())
  saleNumber        String             @unique
  customNumber      String?
  customerId        String?
  userId            String
  subtotal          Decimal            @db.Decimal(10, 2)
  taxAmount         Decimal            @db.Decimal(10, 2)
  discountAmount    Decimal            @default(0) @db.Decimal(10, 2)
  total             Decimal            @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus      @default(PENDING)
  notes             String?
  terminalId        String?
  currencyId        String?
  currency          Currency?          @relation(fields: [currencyId], references: [id])
  // Relations
  customer          Customer?          @relation(fields: [customerId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  items             SaleItem[]
  payments          Payment[]
  creditNotes       CreditNote[]
  recurringInvoices RecurringInvoice[]
  commissions       Commission[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  discount  Decimal @default(0) @db.Decimal(10, 2)
  taxRate   Decimal @db.Decimal(5, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relations
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Purchase {
  id             String      @id @default(cuid())
  purchaseNumber String      @unique
  supplierId     String
  userId         String
  subtotal       Decimal     @db.Decimal(10, 2)
  taxAmount      Decimal     @db.Decimal(10, 2)
  total          Decimal     @db.Decimal(10, 2)
  status         OrderStatus @default(DRAFT)
  expectedDate   DateTime?
  receivedDate   DateTime?
  notes          String?

  // Relations
  supplier Supplier       @relation(fields: [supplierId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
  items    PurchaseItem[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchases")
}

model PurchaseItem {
  id         String  @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  unitCost   Decimal @db.Decimal(10, 2)
  taxRate    Decimal @db.Decimal(5, 2)
  total      Decimal @db.Decimal(10, 2)

  // Relations
  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

model Payment {
  id         String        @id @default(cuid())
  amount     Decimal       @db.Decimal(10, 2)
  method     PaymentMethod
  status     PaymentStatus @default(PENDING)
  reference  String?
  notes      String?
  saleId     String?
  purchaseId String?
  currencyId String?
  currency   Currency?     @relation(fields: [currencyId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  sale       Sale?         @relation(fields: [saleId], references: [id])
  purchase   Purchase?     @relation(fields: [purchaseId], references: [id])

  @@map("payments")
}

model StockMovement {
  id        String          @id @default(cuid())
  productId String
  type      TransactionType
  quantity  Int
  reference String?
  notes     String?

  // Relations
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@map("stock_movements")
}

model AuditLog {
  id        String  @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?

  // Relations
  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Setting {
  id          String  @id @default(cuid())
  key         String  @unique
  value       Json
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Notification {
  id      String  @id @default(cuid())
  userId  String?
  title   String
  message String
  type    String  @default("INFO") // INFO, WARNING, ERROR, SUCCESS
  read    Boolean @default(false)
  data    Json?

  // Relations
  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("notifications")
}

// HR Module Models
model Employee {
  id          String         @id @default(cuid())
  employeeId  String         @unique
  firstName   String
  lastName    String
  email       String         @unique
  phone       String?
  address     String?
  dateOfBirth DateTime?
  hireDate    DateTime       @default(now())
  position    String
  department  String
  salary      Decimal        @db.Decimal(10, 2)
  status      EmployeeStatus @default(ACTIVE)

  // Relations
  attendances Attendance[]
  payrolls    Payroll[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employees")
}

model Attendance {
  id         String           @id @default(cuid())
  employeeId String
  date       DateTime         @db.Date
  clockIn    DateTime?
  clockOut   DateTime?
  totalHours Decimal?         @db.Decimal(5, 2)
  status     AttendanceStatus @default(PRESENT)
  notes      String?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendances")
}

model Payroll {
  id          String        @id @default(cuid())
  employeeId  String
  period      String // e.g., "2024-01"
  basicSalary Decimal       @db.Decimal(10, 2)
  allowances  Decimal       @default(0) @db.Decimal(10, 2)
  deductions  Decimal       @default(0) @db.Decimal(10, 2)
  overtime    Decimal       @default(0) @db.Decimal(10, 2)
  netSalary   Decimal       @db.Decimal(10, 2)
  status      PayrollStatus @default(PENDING)
  paidDate    DateTime?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payrolls")
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  CANCELLED
}

// Accounting and Finance Models
model Account {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  type         AccountType
  category     String
  balance      Decimal       @default(0) @db.Decimal(15, 2)
  currencyId   String?
  costCenterId String?
  currency     Currency?     @relation(fields: [currencyId], references: [id])
  costCenter   CostCenter?   @relation(fields: [costCenterId], references: [id])
  isActive     Boolean       @default(true)
  description  String?
  transactions Transaction[]
  journalItems JournalItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("accounts")
}

model Transaction {
  id           String          @id @default(cuid())
  accountId    String
  type         TransactionType
  amount       Decimal         @db.Decimal(15, 2)
  description  String
  reference    String?
  date         DateTime        @default(now())
  isReconciled Boolean         @default(false)
  currencyId   String?
  currency     Currency?       @relation(fields: [currencyId], references: [id])
  account      Account         @relation(fields: [accountId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("transactions")
}

model JournalEntry {
  id                String             @id @default(cuid())
  entryNumber       String             @unique
  date              DateTime           @default(now())
  description       String
  reference         String?
  isPosted          Boolean            @default(false)
  postedAt          DateTime?
  postedBy          String?
  currencyId        String?
  currency          Currency?          @relation(fields: [currencyId], references: [id])
  // Relations
  journalItems      JournalItem[]
  recurringJournals RecurringJournal[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("journal_entries")
}

model JournalItem {
  id             String  @id @default(cuid())
  journalEntryId String
  accountId      String
  debit          Decimal @default(0) @db.Decimal(15, 2)
  credit         Decimal @default(0) @db.Decimal(15, 2)
  description    String?

  // Relations
  journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id])
  account      Account      @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("journal_items")
}

model BankAccount {
  id               String            @id @default(cuid())
  accountNumber    String            @unique
  bankName         String
  accountType      String
  balance          Decimal           @default(0) @db.Decimal(15, 2)
  currency         String            @default("USD")
  isActive         Boolean           @default(true)
  // Relations
  bankTransactions BankTransaction[]

  lastReconciled DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bank_accounts")
}

model BankTransaction {
  id              String              @id @default(cuid())
  bankAccountId   String
  transactionDate DateTime
  description     String
  amount          Decimal             @db.Decimal(15, 2)
  type            BankTransactionType
  reference       String?
  isReconciled    Boolean             @default(false)

  // Relations
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bank_transactions")
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum BankTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  FEE
  INTEREST
}

// --- Finance & Accounting Enhancements ---
model Currency {
  id                String         @id @default(cuid())
  code              String         @unique
  name              String
  symbol            String
  isDefault         Boolean        @default(false)
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  exchangeRatesFrom ExchangeRate[] @relation("FromCurrency")
  exchangeRatesTo   ExchangeRate[] @relation("ToCurrency")
  accounts          Account[]
  transactions      Transaction[]
  budgets           Budget[]
  journalEntries    JournalEntry[]
  sales             Sale[]
  payments          Payment[]

  @@map("currencies")
}

model ExchangeRate {
  id             String    @id @default(cuid())
  fromCurrencyId String
  toCurrencyId   String
  rate           Decimal   @db.Decimal(18, 8)
  validFrom      DateTime
  validTo        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  fromCurrency   Currency  @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  toCurrency     Currency  @relation("ToCurrency", fields: [toCurrencyId], references: [id])

  @@map("exchange_rates")
}

model CostCenter {
  id        String    @id @default(cuid())
  name      String    @unique
  code      String    @unique
  isActive  Boolean   @default(true)
  budgets   Budget[]
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("cost_centers")
}

model Budget {
  id           String     @id @default(cuid())
  name         String
  year         Int
  period       String // e.g., Q1, Q2, Q3, Q4, or month
  amount       Decimal    @db.Decimal(15, 2)
  spent        Decimal    @default(0) @db.Decimal(15, 2)
  costCenterId String
  currencyId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  costCenter   CostCenter @relation(fields: [costCenterId], references: [id])
  currency     Currency   @relation(fields: [currencyId], references: [id])

  @@map("budgets")
}

model RecurringJournal {
  id             String       @id @default(cuid())
  name           String
  schedule       String // cron or ISO 8601 duration
  nextRun        DateTime
  isActive       Boolean      @default(true)
  journalEntryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])

  @@map("recurring_journals")
}

model Approval {
  id            String         @id @default(cuid())
  entityType    String // e.g., 'Transaction', 'JournalEntry', etc.
  entityId      String
  status        ApprovalStatus @default(PENDING)
  requestedById String
  approvedById  String?
  requestedAt   DateTime       @default(now())
  approvedAt    DateTime?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  requestedBy   User           @relation("ApprovalRequestedBy", fields: [requestedById], references: [id])
  approvedBy    User?          @relation("ApprovalApprovedBy", fields: [approvedById], references: [id])

  @@map("approvals")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model RecurringInvoice {
  id        String   @id @default(cuid())
  saleId    String
  schedule  String // cron or ISO 8601 duration
  nextRun   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sale      Sale     @relation(fields: [saleId], references: [id])

  @@map("recurring_invoices")
}

model CreditNote {
  id           String           @id @default(cuid())
  saleId       String
  amount       Decimal          @db.Decimal(10, 2)
  reason       String
  status       CreditNoteStatus @default(PENDING)
  issuedById   String
  issuedAt     DateTime         @default(now())
  approvedById String?
  approvedAt   DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  sale         Sale             @relation(fields: [saleId], references: [id])
  issuedBy     User             @relation("CreditNoteIssuedBy", fields: [issuedById], references: [id])
  approvedBy   User?            @relation("CreditNoteApprovedBy", fields: [approvedById], references: [id])

  @@map("credit_notes")
}

enum CreditNoteStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model SalesTarget {
  id           String       @id @default(cuid())
  userId       String
  period       String // e.g., 2024-Q1
  targetAmount Decimal      @db.Decimal(15, 2)
  achieved     Decimal      @default(0) @db.Decimal(15, 2)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  commissions  Commission[]

  @@map("sales_targets")
}

model Commission {
  id            String      @id @default(cuid())
  salesTargetId String
  saleId        String
  amount        Decimal     @db.Decimal(10, 2)
  userId        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  salesTarget   SalesTarget @relation(fields: [salesTargetId], references: [id])
  sale          Sale        @relation(fields: [saleId], references: [id])
  user          User?       @relation("UserCommissions", fields: [userId], references: [id])

  @@map("commissions")
}
