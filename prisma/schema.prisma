// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MANAGER
  SALESPERSON
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TransactionType {
  SALE
  PURCHASE
  RETURN
  ADJUSTMENT
  TRANSFER
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  CHEQUE
  CREDIT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  username    String?    @unique
  firstName   String
  lastName    String
  phone       String?
  role        Role       @default(SALESPERSON)
  status      UserStatus @default(ACTIVE)
  password    String
  lastLogin   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  sales       Sale[]
  purchases   Purchase[]
  auditLogs   AuditLog[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("categories")
}

model Product {
  id            String        @id @default(cuid())
  name          String
  description   String?
  sku           String        @unique
  barcode       String?       @unique
  rfidTag       String?       @unique
  price         Decimal       @db.Decimal(10, 2)
  cost          Decimal       @db.Decimal(10, 2)
  minStock      Int           @default(0)
  maxStock      Int?
  currentStock  Int           @default(0)
  unit          String        @default("piece")
  status        ProductStatus @default(ACTIVE)
  categoryId    String
  supplierId    String?
  taxRate       Decimal       @default(0) @db.Decimal(5, 2)
  image         String?
  
  // Relations
  category      Category      @relation(fields: [categoryId], references: [id])
  supplier      Supplier?     @relation(fields: [supplierId], references: [id])
  saleItems     SaleItem[]
  purchaseItems PurchaseItem[]
  stockMovements StockMovement[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("products")
}

model Supplier {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  contactPerson String?
  taxId       String?
  
  // Relations
  products    Product[]
  purchases   Purchase[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("suppliers")
}

model Customer {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  taxId       String?
  creditLimit Decimal?  @db.Decimal(10, 2)
  
  // Relations
  sales       Sale[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("customers")
}

model Sale {
  id            String        @id @default(cuid())
  saleNumber    String        @unique
  customerId    String?
  userId        String
  subtotal      Decimal       @db.Decimal(10, 2)
  taxAmount     Decimal       @db.Decimal(10, 2)
  discountAmount Decimal      @default(0) @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?
  terminalId    String?
  
  // Relations
  customer      Customer?     @relation(fields: [customerId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  items         SaleItem[]
  payments      Payment[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("sales")
}

model SaleItem {
  id          String  @id @default(cuid())
  saleId      String
  productId   String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(10, 2)
  taxRate     Decimal @db.Decimal(5, 2)
  total       Decimal @db.Decimal(10, 2)
  
  // Relations
  sale        Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  
  @@map("sale_items")
}

model Purchase {
  id            String         @id @default(cuid())
  purchaseNumber String        @unique
  supplierId    String
  userId        String
  subtotal      Decimal        @db.Decimal(10, 2)
  taxAmount     Decimal        @db.Decimal(10, 2)
  total         Decimal        @db.Decimal(10, 2)
  status        OrderStatus    @default(DRAFT)
  expectedDate  DateTime?
  receivedDate  DateTime?
  notes         String?
  
  // Relations
  supplier      Supplier       @relation(fields: [supplierId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  items         PurchaseItem[]
  payments      Payment[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@map("purchases")
}

model PurchaseItem {
  id          String   @id @default(cuid())
  purchaseId  String
  productId   String
  quantity    Int
  unitCost    Decimal  @db.Decimal(10, 2)
  taxRate     Decimal  @db.Decimal(5, 2)
  total       Decimal  @db.Decimal(10, 2)
  
  // Relations
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
  
  @@map("purchase_items")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  reference     String?
  notes         String?
  saleId        String?
  purchaseId    String?
  
  // Relations
  sale          Sale?         @relation(fields: [saleId], references: [id])
  purchase      Purchase?     @relation(fields: [purchaseId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("payments")
}

model StockMovement {
  id          String          @id @default(cuid())
  productId   String
  type        TransactionType
  quantity    Int
  reference   String?
  notes       String?
  
  // Relations
  product     Product         @relation(fields: [productId], references: [id])
  
  createdAt   DateTime        @default(now())
  
  @@map("stock_movements")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  entity      String
  entityId    String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("settings")
}